# CUBE SDK

# PROG must be set before sourcing this file
if [ -z "$PROG" ] ; then
    echo "Error: PROG not set" >&2
    exit 1
fi

HEX_DONE=/run/bootstrap_done
CUBE_DONE=/run/cube_commit_done
CLUSTER_SYNC=/run/cube_cluster_synced
CLUSTER_REPAIRING=/run/cube_cluster_repairing
HORIZON_APP_DIR=/usr/share/openstack-dashboard/openstack_dashboard/local/enabled

_hex_exec_abort()
{
    Quiet -n pkill -P $(cat $CLUSTER_REPAIRING 2>/dev/null)
    rm -f $CLUSTER_REPAIRING
}

_hex_exec()
{
    local cmd="${1:-BADCMD}"
    shift 1
    local runtime=/run/$cmd
    if echo "$cmd" | grep -q "health_.*_check$" ; then
        if [ -e $HEX_STATE_DIR/${cmd}_disabled ] ; then
            local srv=$(echo $cmd | sed -e "s/^health_//" -e "s/_check$//")
            query="insert health,component=$srv,node=$HOSTNAME,code=$ERR_CODE description=\"disabled\""
            $INFLUX -database events -execute "${query},detail=\"$cmd\""
        else
            if [ "x$1" = "x-l" -o "x$1" = "x-last" -o "x${HEX_HEALTH_LAST:=0}" != "x0" ] ; then
                shift 1
                local last_chk="true"
            fi
            if [ -e $runtime -a "x$last_chk" = "xtrue" ] ; then
                ret=$(cat $runtime | jq -r .ERROR_CODE)
                $cmd $@ &
                return ${ret:-0}
            else
                $cmd $@
            fi
        fi
    elif echo "$cmd" | grep -q "health_.*_repair$" ; then
        if $HEX_SDK is_repairing ; then
            return 1
        else
            trap _hex_exec_abort INT EXIT
            $cmd $@ &
            echo $! > $runtime
            ln -sf $runtime $CLUSTER_REPAIRING
            local srv=$(echo $cmd | sed -e "s/^health_//" -e "s/_repair$//")
            query="insert health,component=$srv,node=$HOSTNAME,code=$ERR_CODE description=\"fixing\""
            $INFLUX -database events -execute "${query},detail=\"$cmd\""
            wait $(cat $runtime) && rm -f $runtime $CLUSTER_REPAIRING
        fi
    else
        $cmd $@
    fi
}

shared_id()
{
    local shared_id=$(cat /run/shared_id 2>/dev/null)
    if [ "x$shared_id" = "x" -o "x$shared_id" = "xunconfigured" ] ; then
        source hex_tuning /etc/settings.txt cubesys.control.vip
        local shared_id=$T_cubesys_control_vip
        if [ -z "$shared_id" ] ; then
            shared_id=$(hostname)
        fi

        echo -n $shared_id > /run/shared_id
    fi

    cat /run/shared_id
}

cube_control_strf_addrs()
{
    local strf=$(cubectl node list -r control -j | jq -r .[].ip.storage | tr '\n' ',')
    strf=${strf:-1}
    echo -n "$strf"
}

cube_edge_cfg()
{
    if ! is_core_node ; then
        return 0
    fi

    for ctrl_entry in $(cubectl node list -r control -j | jq -r .[].ip.management) ; do
        local ctrl=$(echo $ctrl_entry | head -c -1)
        remote_run $ctrl mkdir -p $HORIZON_APP_DIR/bak
        # designate
        remote_run $ctrl mv $HORIZON_APP_DIR/_17*.py $HORIZON_APP_DIR/bak/
        # watcher
        remote_run $ctrl mv $HORIZON_APP_DIR/_310*.py $HORIZON_APP_DIR/bak/
        # senlin
        remote_run $ctrl mv $HORIZON_APP_DIR/_50_senlin.py $HORIZON_APP_DIR/bak/
        remote_run $ctrl python3 /usr/share/openstack-dashboard/manage.py compilemessages 2>&1 > /dev/null
        remote_run $ctrl python3 /usr/share/openstack-dashboard/manage.py collectstatic --noinput 2>&1 > /dev/null
        remote_run $ctrl python3 /usr/share/openstack-dashboard/manage.py compress --force 2>&1 > /dev/null
        remote_run $ctrl systemctl restart httpd
    done

    return 0
}

cube_cluster_ready()
{
    for node_entry in $(cubectl node list -j | jq -r .[].ip.management) ; do
        local node=$(echo $node_entry | head -c -1)
        if ! remote_run $node timeout 15 $HEX_SDK cube_node_ready >/dev/null ; then
            return -1
        fi
    done

    return 0
}

cube_node_ready()
{
    if [ -f $HEX_DONE -a -f $CUBE_DONE -a -f $CLUSTER_SYNC ] ; then
        return 0
    fi

    return -1
}

cube_commit_done()
{
    touch /run/cube_commit_done
}

cube_cluster_start()
{
    Quiet -n ip neigh flush all
    Quiet -n $HEX_SDK ceph_leave_maintenance # ensure storage is working (healing itself if necessary) before other actions
    if [ "$VERBOSE" == "1" ] ; then
        /usr/sbin/hex_config -p trigger cluster_start
    else
        /usr/sbin/hex_config trigger cluster_start
    fi

    touch /run/cube_cluster_synced

    Quiet -n cubectl node exec -p "$HEX_SDK network_ipt_serviceint" # customized iptables
    Quiet -n $HEX_SDK ceph_osd_set_bucket_host # assign osds to customized ceph buckets
    Quiet -n $HEX_SDK git_server_init          # fw upgrade needs to track the new filesystem
    Quiet -n $HEX_SDK git_client_init          # for new nodes, joining cluster
    Quiet -n $HEX_SDK os_resume_hypervisor     # resume hypervisors disabled due to ins-ha
    Quiet -n killall /usr/sbin/hex_banner # refresh console banner to display up-to-date cluster info.
    # by default disable ceph_osd which in case of disk failures cannot be handled by software
    ( $HEX_SDK toggle_health_check | grep ceph_osd | grep -q disabled ) || Quiet -n $HEX_SDK toggle_health_check ceph_osd
}

cube_cluster_stop()
{
    rm -f /var/lib/corosync/*
    rm -rf /var/lib/rabbitmq/mnesia/*
    rm -f /etc/appliance/state/rabbitmq_cluster_done
    touch /etc/appliance/state/mysql_new_cluster
}

cube_cluster_power()
{
    case $1 in
        off)
            PWRCMD="/sbin/poweroff"
            ;;
        cycle)
            PWRCMD="/sbin/reboot"
            ;;
        *)
            echo "usage: cube_cluster_power off|cycle" && return 0
            ;;
    esac

    source /usr/sbin/hex_tuning /etc/settings.txt
    if [ "x$T_cubesys_control_hosts" = "x" ] ; then
        export MASTER_CONTROL=$T_cubesys_controller
        [ -n "$MASTER_CONTROL" ] || MASTER_CONTROL=$T_net_hostname
    else
        export MASTER_CONTROL=$(echo $T_cubesys_control_hosts | cut -d"," -f1)
    fi

    if [ "x${MASTER_CONTROL:-NOMASTER}" != "x$(hostname)" ] ; then
        remote_run ${MASTER_CONTROL:-NOMASTER} "$HEX_SDK cube_cluster_power $1"
    else
        Quiet timeout 15 cubectl node exec -p "timeout 10 umount $CEPHFS_STORE_DIR" || true
        for N in $(cubectl node list -j | jq -r .[].hostname | tac) ; do
            timeout 3 $HEX_SDK remote_run $N "$PWRCMD" || true
        done
    fi
}

cube_node_repair()
{
    repair_pid=$(cat $CLUSTER_REPAIR 2>/dev/null)
    if ps -p ${repair_pid:-NOPID} >/dev/null 2>&1 ; then
        ps $repair_pid
        ps -o etime $repair_pid
        return 1
    else
        $HEX_CLI -c cluster check_repair &
        echo $! >$CLUSTER_REPAIR
        wait $! && rm -f $CLUSTER_REPAIR
    fi
}

cube_cluster_repair()
{
    source /usr/sbin/hex_tuning /etc/settings.txt
    if [ "x$T_cubesys_control_hosts" = "x" ] ; then
        export MASTER_CONTROL=$T_cubesys_controller
        [ -n "$MASTER_CONTROL" ] || MASTER_CONTROL=$T_net_hostname
    else
        export MASTER_CONTROL=$(echo $T_cubesys_control_hosts | cut -d"," -f1)
    fi
    remote_run ${MASTER_CONTROL:-NOMASTER} "$HEX_SDK cube_node_repair"
}

cube_remote_cluster_check()
{
    # If this node is control (non moderator), return 1 to run CLI cluster check locally
    if is_control_node && ! is_moderator_node ; then
        return 1
    fi

    for N in $(cubectl node list -r control -j | jq -r .[].hostname) ; do
        if remote_run $N "$HEX_SDK is_moderator_node" ; then
            continue
        elif [ "x$(remote_run $N "$HEX_SDK hostname")" = "x$N" ] ; then
            remote_run $N "$HEX_CLI -c cluster check"
            break
        fi
    done
    return 0
}

cube_node_remove()
{
    local host=$1
    local role=$(cubectl node list | grep "$host," | awk -F',' '{print $3}' | tr -d '\n')

    # remove a compute node
    if [ "$role" == "compute" ] ; then
        Quiet -n $HEX_SDK os_nova_service_remove $host "nova-compute"
        Quiet -n $HEX_SDK os_manila_service_remove $host "manila-share"
        Quiet -n $HEX_SDK os_neutron_agent_remove $host "ovn-controller"
        Quiet -n $HEX_SDK os_neutron_agent_remove $host "networking-ovn-metadata-agent"
        Quiet -n $HEX_SDK os_neutron_agent_remove $host "neutron-ovn-vpn-agent"
        pcs resource delete $host >/dev/null 2>&1
    fi

    if [ -n "$host" ] ; then
        Quiet -n $HEX_SDK ceph_osd_host_remove $host >/dev/null 2>&1
        crm_node --force --remove $host >/dev/null 2>&1
    fi

    cubectl node remove $host
}

cube_cluster_setting_clear()
{
    Quiet -n $HEX_SDK ceph_dashboard_iscsi_gw_rm
}

cube_cluster_recreate()
{
    #systemctl stop rbd-target-gw rbd-target-api

    if is_control_node ; then
        systemctl stop logstash monasca-persister
        systemctl stop opensearch influxdb kafka zookeeper
        systemctl stop mariadb rabbitmq-server
        hex_config purge_ceph_mon
        rm -rf /etc/appliance/state/ceph_msgr2_done
        rm -rf /var/lib/rabbitmq/mnesia/*
        rm -f /etc/appliance/state/rabbitmq_cluster_done
        rm -f /etc/appliance/state/ceph_dashboard_idp_done
        rm -f /etc/appliance/state/lmi_idp_done
        rm -f /etc/httpd/conf.d/v3_mellon_keycloak_master.conf
        touch /etc/appliance/state/mysql_new_cluster
        touch /etc/appliance/state/keystone_idp_update
        pcs resource disable vip
        pcs resource disable haproxy
        pcs resource disable cinder-volume
        pcs resource disable ovndb_servers-clone
    fi

    systemctl stop filebeat auditbeat telegraf
    systemctl stop pcsd pacemaker corosync
    cubectl config reset all
    rm -f /etc/appliance/state/api_idp_done
    rm -f /var/lib/corosync/*
    rm -rf /var/lib/pacemaker/blackbox/*
    rm -rf /var/lib/pacemaker/cib/*
    rm -rf /var/lib/pacemaker/cores/*
    rm -rf /var/lib/pacemaker/pengine/*
}

cube_control_rejoin_set()
{
    touch /etc/appliance/state/admin_cli_user_done
    touch /etc/appliance/state/ceph_autoscale_done
    touch /etc/appliance/state/cephfs_done
    touch /etc/appliance/state/ceph_mgr_influx_enabled
    touch /etc/appliance/state/ceph_msgr2_done
    touch /etc/appliance/state/ceph_osd_pool_done
    touch /etc/appliance/state/ceph_restful_done
    touch /etc/appliance/state/cinder_pool_done
    touch /etc/appliance/state/manila_init_done
    touch /etc/appliance/state/mysql_done
    touch /etc/appliance/state/octavia_init_done
    touch /etc/appliance/state/swift_done
    touch /etc/appliance/state/s3_done
    touch /run/control_rejoin
}

cube_control_rejoin_clear()
{
    rm -f /etc/appliance/state/admin_cli_user_done
    rm -f /etc/appliance/state/ceph_autoscale_done
    rm -f /etc/appliance/state/cephfs_done
    rm -f /etc/appliance/state/ceph_mgr_influx_enabled
    rm -f /etc/appliance/state/ceph_msgr2_done
    rm -f /etc/appliance/state/ceph_osd_pool_done
    rm -f /etc/appliance/state/ceph_restful_done
    rm -f /etc/appliance/state/cinder_pool_done
    rm -f /etc/appliance/state/manila_init_done
    rm -f /etc/appliance/state/mysql_done
    rm -f /etc/appliance/state/octavia_init_done
    rm -f /etc/appliance/state/swift_done
    rm -f /etc/appliance/state/s3_done
    rm -f /run/control_rejoin
}

cube_stats()
{
    INPUT=$1
    BIFS=$IFS
    if [ -z "$INPUT" ] ; then
        STATS=$(top -b -n 1)
        ITEMS=$(top -b -n 1 | awk '{print $2}' | grep -v "USER\|Swap:\|Mem" | sort | uniq | tail -n +8)
    else
        STATS=$(cat $INPUT)
        ITEMS=$(cat $INPUT | awk '{print $2}' | grep -v "USER\|Swap:\|Mem" | sort | uniq | tail -n +8)
    fi

    if [ "$FORMAT" != "json" ] ; then
        echo $(hostname)
    else
        echo "["
    fi

    cube_k3s_stats

    if [ "$FORMAT" != "json" ] ; then
        printf "%-25s %6s %20s\n" "PROCESS" "CPU%" "MEM(%/MB)"
        echo "--------------------------------------------------------"
    fi

    SYS_CPT=0
    SYS_MPT=0
    SYS_MT=0
    for proc in $ITEMS ; do
        [ "$proc" != "root" ] || continue
        if $(echo $STATS | grep -q $proc) ; then
            BYTES=0
            IFS=
            LIST=$(echo $STATS | grep $proc | awk '{print $6}' | tr '\n' ' ')
            if $(echo $LIST | grep -q 'm\|g\|t') ; then
                IFS=$" "
                for M in $LIST ; do
                    if $(echo $M | grep -q m) ; then
                        BYTES=$(echo "${M%?} * 1024 + $BYTES" | bc)
                    elif $(echo $M | grep -q g) ; then
                        BYTES=$(echo "${M%?} * 1048576 + $BYTES" | bc)
                    elif $(echo $M | grep -q t) ; then
                        BYTES=$(echo "${M%?} * 1073741824 + $BYTES" | bc)
                    else
                        BYTES=$(echo "$BYTES + $M" | bc)
                    fi
                done
            else
                BYTES=$(echo $STATS | grep $proc | awk '{print $6}' | paste -sd+ - | bc)
            fi

            MEM_PCNT=$(echo $STATS | grep $proc | awk '{print $10}' | paste -sd+ - | bc)
            CPU_PCNT=$(echo $STATS | grep $proc | awk '{print $9}' | paste -sd+ - | bc)
            MBYTES=$(echo "$BYTES / 1024" | bc)

            SYS_CPT=$(echo "scale=5 ; $SYS_CPT + $CPU_PCNT" | bc)
            SYS_MPT=$(echo "scale=5 ; $SYS_MPT + $MEM_PCNT" | bc)
            SYS_MT=$((SYS_MT + MBYTES))

            CPU_PCNT=$(echo "scale=2 ; x=$CPU_PCNT/1 ; if(x < 1 && x != 0) print 0 ; x" | bc)
            MEM_PCNT=$(echo "scale=2 ; x=$MEM_PCNT/1 ; if(x < 1 && x != 0) print 0 ; x" | bc)

            if [ "$proc" == "root" ] ; then
                CPU_PCNT=$(echo "scale=2 ; x=$CPU_PCNT - $K3S_CPT ; if(x < 0) 0 else x" | bc | awk '{printf "%.2f", $0}')
                MEM_PCNT=$(echo "scale=2 ; x=$MEM_PCNT - $K3S_MPT ; if(x < 0) 0 else x" | bc | awk '{printf "%.2f", $0}')
                MBYTES=$(echo "x=$MBYTES - $K3S_MT ; if(x < 0) 0 else x" | bc | awk '{printf "%.2f", $0}')
            fi

            if [ "$FORMAT" != "json" ] ; then
                printf "%-25s %5s%% %15s%%/%s\n" "$proc" "$CPU_PCNT" "$MEM_PCNT" "$MBYTES"
            else
                echo "  { \"program\": \"$proc\", \"host\": \"$HOSTNAME\", \"cpu_util\": $CPU_PCNT, \"mem_util\": $MEM_PCNT, \"mb\": $MBYTES },"
            fi
        fi
        IFS=$BIFS
    done

    if [ "$FORMAT" != "json" ] ; then
        SYS_CPT=$(echo "scale=2 ; x=$SYS_CPT/1 ; if(x < 1 && x != 0) print 0 ; x" | bc)
        SYS_MPT=$(echo "scale=2 ; x=$SYS_MPT/1 ; if(x < 1 && x != 0) print 0 ; x" | bc)
        echo "---------------------------------------------------------"
        printf "%-25s %5s%% %15s%%/%s\n\n" "TOTAL" "$SYS_CPT" "$SYS_MPT" "$SYS_MT"
    fi

    if [ "$FORMAT" == "json" ] ; then
        echo "  {}"
        echo "]"
    fi
}

cube_k3s_stats()
{
    local k3s_cpt=0
    local k3s_mpt=0
    local k3s_mt=0

    if ! is_running k3s ; then
        return 0
    fi

    local k3s_stats_file=$1

    if [ -z "$k3s_stats_file" ] ; then
        kubectl top pod -A --no-headers > /run/k3s.stats
        k3s_stats_file=/run/k3s.stats
    fi

    if [ "$FORMAT" != "json" ] ; then
        printf "%-25s %6s %20s\n" "K3S NAMESPACE" "CPU%" "MEM(%/MB)"
        echo "--------------------------------------------------------"
    fi

    local vcpu_total_in_milli=$(echo "$(lscpu | grep "^CPU(s):" | awk '{print $2}' | tr -d '\n') * 1000" | bc)
    local mem_total_in_mb=$(echo "$(grep MemTotal /proc/meminfo | awk '{print $2}' | tr -d '\n') / 1000" | bc)
    local host_pod_list=$(kubectl get pods --all-namespaces -o wide --field-selector spec.nodeName=$(hostname) --no-headers | awk '{print $2}' | tr '\n' ' ')
    local k3s_stats=$(cat $k3s_stats_file)

    local ns=$(echo "$k3s_stats" | awk '{print $1}' | sort | uniq)
    for n in $ns ; do
        mvcpu=0
        mbytes=0

        plist=$(echo "$k3s_stats" | grep $n | awk '{print $2}' | tr '\n' ' ')
        for p in $plist ; do
            if echo $host_pod_list | grep -q $p ; then
                c=$(echo "$k3s_stats" | grep $p | awk '{print $3}')
                mvcpu=$(echo "$mvcpu + $(echo $c | awk -F'm' '{print $1}')" | bc)

                m=$(echo "$k3s_stats" | grep $p | awk '{print $4}')
                mbytes=$(echo "$mbytes + $(echo $m | awk -F'M' '{print $1}')" | bc)
            fi
        done

        cpu_pcnt=$(echo "scale=5 ; $mvcpu / $vcpu_total_in_milli * 100" | bc)
        k3s_cpt=$(echo "scale=5 ; $k3s_cpt + $cpu_pcnt" | bc)
        mem_pcnt=$(echo "scale=5 ; $mbytes / $mem_total_in_mb * 100" | bc)
        k3s_mpt=$(echo "scale=5 ; $k3s_mpt + $mem_pcnt" | bc)
        k3s_mt=$((k3s_mt + mbytes))

        cpu_pcnt=$(echo "scale=2 ; x=$cpu_pcnt/1 ; if(x < 1 && x != 0) print 0 ; x" | bc)
        mem_pcnt=$(echo "scale=2 ; x=$mem_pcnt/1 ; if(x < 1 && x != 0) print 0 ; x" | bc)

        if [ "$FORMAT" != "json" ] ; then
            printf "%-25s %5s%% %15s%%/%s\n" "$n" "$cpu_pcnt" "$mem_pcnt" "$mbytes"
        else
            echo "  { \"program\": \"$n\", \"host\": \"$HOSTNAME\", \"cpu_util\": $cpu_pcnt, \"mem_util\": $mem_pcnt, \"mb\": $mbytes },"
        fi
    done

    if [ "$FORMAT" != "json" ] ; then
        k3s_cpt=$(echo "scale=2 ; x=$k3s_cpt/1 ; if(x < 1 && x != 0) print 0 ; x" | bc)
        k3s_mpt=$(echo "scale=2 ; x=$k3s_mpt/1 ; if(x < 1 && x != 0) print 0 ; x" | bc)
        echo "---------------------------------------------------------"
        printf "%-25s %5s%% %15s%%/%s\n\n" "TOTAL" "$k3s_cpt" "$k3s_mpt" "$k3s_mt"
    fi
}

cube_oom_stats()
{
    local oomlog=$1

    if [ ! -f "$oomlog" ] ; then
        dmesg | sed -n '/total_vm/,/Out of memory/{//b;p}' > /run/oomlog
        oomlog=/run/oomlog
    fi

    local bifs=$IFS
    local stats=$(cat $oomlog | awk -F']' '{print $NF}')
    local items=$(cat $oomlog | awk -F']' '{print $NF}' | awk '{print $8}' | sort | uniq | tail -n +8)

    echo $(hostname)
    printf "%-15s %15s\n" "PROCESS" "MEM(MB)"
    echo "-----------------------------------"

    local total=0
    for proc in $items ; do
        if $(echo $stats | grep -q $proc) ; then
            bytes=0
            IFS=
            # get rss (resident set size)
            LIST=$(echo $stats | grep $proc | awk '{print $4}' | tr '\n' ' ')
            if $(echo $LIST | grep -q 'm\|g\|t') ; then
                IFS=$" "
                for M in $LIST ; do
                    if $(echo $M | grep -q m) ; then
                        bytes=$(echo "${M%?} * 1024 + $bytes" | bc)
                    elif $(echo $M | grep -q g) ; then
                        bytes=$(echo "${M%?} * 1048576 + $bytes" | bc)
                    elif $(echo $M | grep -q t) ; then
                        bytes=$(echo "${M%?} * 1073741824 + $bytes" | bc)
                    else
                        bytes=$(echo "$bytes + $M" | bc)
                    fi
                done
            else
                bytes=$(echo $stats | grep " $proc" | awk '{print $4}' | paste -sd+ - | bc)
            fi

            mbytes=$(echo "$bytes / 1024" | bc)
            # 4kB page
            mbytes=$((mbytes * 4))
            printf "%-15s %15s\n" "$proc" "$mbytes"
            total=$((total + mbytes))
        fi
        IFS=$bifs
    done
    echo "-----------------------------------"
    printf "%-15s %15s\n" "TOTAL" "$total"
}

cube_disk_stats()
{
    echo "["
    du -k "$@" --max-depth=1 | sort -hr | head -30 | awk -v h="$HOSTNAME" '{if (NR!=1) {printf ",\n"};printf "  { \"size\": "$1", \"host\": \""h"\", \"path\": \""$2"\", \"unit\": \"KB\" }";}'
    echo
    echo "]"
}

cube_read_policy()
{
    local namespace=$1
    local version=$2
    cat /etc/policies/${namespace}${version}.yml
}

cube_cluster_run()
{
    local role=$1
    shift 1
    local roleOpt=
    local cmd=$@

    if [ "$role" != "all" ] ; then
        roleOpt="-r $role"
    fi

    readarray ip_array <<<"$(cubectl node list $roleOpt -j | jq -r .[].ip.management | sort)"
    declare -p ip_array > /dev/null
    for ip_entry in "${ip_array[@]}" ; do
        local ip=$(echo $ip_entry | head -c -1)
        echo "Running '$cmd' on server $ip"
        ssh root@$ip $cmd 2>/dev/null
    done
}

wait_for_netdev()
{
    local netdev=$1
    local timeout=$2

    local i=0
    while [ $i -lt $timeout ] ; do
        if ip link show $netdev >/dev/null 2>&1 ; then
            break
        else
            sleep 1
        fi
        i=$(expr $i + 1)
    done
    [ $i -lt $timeout ]
}

wait_for_zookeeper()
{
    local bind_host=$1
    local port=$2
    local timeout=$3

    local i=0
    while [ $i -lt $timeout ] ; do
        readiness=$(echo stat | nc $bind_host $port | wc -l)
        if [ $readiness -gt 0 ] ; then
            break
        else
            sleep 1
        fi
        i=$(expr $i + 1)
    done
}

wait_for_pacemaker()
{
    local timeout=$1

    local i=0
    while [ $i -lt $timeout ] ; do
        if [ -f /var/lib/pacemaker/cib/cib.xml ] ; then
            break
        else
            sleep 1
        fi
        i=$(expr $i + 1)
    done
}

wait_for_service()
{
    local bind_host=$1
    local port=$2
    local timeout=$3

    local i=0
    while [ $i -lt $timeout ] ; do
        if $(netstat -lntu | grep -q $bind_host:$port) ; then
            break
        else
            sleep 1
        fi
        i=$(expr $i + 1)
    done
    [ $i -lt $timeout ]
}

wait_for_http_endpoint()
{
    local endpoint=$1
    local port=$2
    local timeout=$3

    local i=0
    while [ $i -lt $timeout ] ; do
        if $CURL -sf http://$endpoint:$port > /dev/null ; then
            break
        else
            sleep 1
        fi
        i=$(expr $i + 1)
    done
    [ $i -lt $timeout ]
}

check_service_memory_and_run()
{
    local service=$1
    local threshold=$2
    shift 2
    local cmd="'$*'"
    local pcnt=$(top -n 1 -b | grep $service | awk '{print $10}' | paste -sd+ - | bc)
    # floating to integer
    if [ ${pcnt%.*} -gt $threshold ] ; then
        /usr/sbin/hex_log_event -e "SRV01001I" "host=$HOSTNAME,service=$service,threshold=$threshold"
        eval "$@"
    fi
}

check_service()
{
    local service=$1

    $HEX_SDK health_${service}_check
    local r=$?
    local desc=$($HEX_SDK health_errcode_lookup $service $r)

    echo "  { \"host\": \"$HOSTNAME\", \"service\": \"$service\", \"status\": $r, \"description\": \"$desc\" },"
}

check_service_stats()
{
    if ! is_control_node ; then
        return 0
    fi

    echo "["

    # base services
    local service_array=(link dns clock bootstrap license etcd hacluster rabbitmq mysql mongodb vip haproxy_ha haproxy httpd nginx api lmi skyline memcache ceph ceph_mon ceph_mgr ceph_mds ceph_osd ceph_rgw rbd_target)
    for service in "${service_array[@]}" ; do
        check_service $service
    done

    # openstack core services
    local service_array=(nova cyborg neutron glance cinder manila swift heat octavia masakari monasca)
    for service in "${service_array[@]}" ; do
        check_service $service
    done

    # k3s services
    local service_array=(k3s keycloak)
    for service in "${service_array[@]}" ; do
        check_service $service
    done

    # monitoring core services
    local service_array=(zookeeper kafka telegraf influxdb kapacitor grafana filebeat auditbeat logstash)
    for service in "${service_array[@]}" ; do
        check_service $service
    done

    if ! is_edge_node ; then
        # openstack services
        local service_array=(ironic designate senlin watcher)
        for service in "${service_array[@]}" ; do
            check_service $service
        done

        # k3s services
        local service_array=(rancher)
        for service in "${service_array[@]}" ; do
            check_service $service
        done

        # monitoring services
        local service_array=(opensearch opensearch-dashboards)
        for service in "${service_array[@]}" ; do
            check_service $service
        done
    fi

    echo "{}]"
}

check_host_stats()
{
    if ! is_control_node ; then
        return 0
    fi
    readarray ip_array <<<"$(cubectl node list -j | jq -r .[].hostname | sort)"
    declare -p ip_array > /dev/null
    echo "["
    for ip_entry in "${ip_array[@]}" ; do
        local ip=$(echo $ip_entry | head -c -1)
        local stats=1
        # report failed if all three pings are failed
        ping -c 1 -w 1 $ip >/dev/null || ping -c 1 -w 1 $ip >/dev/null || ping -c 1 -w 1 $ip >/dev/null || stats=0
        if [ $ip_entry == ${ip_array[-1]} ] ; then
            echo "  { \"node\": \"$ip\", \"status\": $stats }"
        else
            echo "  { \"node\": \"$ip\", \"status\": $stats },"
        fi
    done
    echo "]"
}

cube_data_node_list()
{
    cubectl node list | grep "compute\|storage" | awk -F',' '{print $1}'
}

cube_cluster_ppu()
{
    if $HEX_CLI -c cluster check | grep -q NG ; then
        $HEX_CLI -c cluster check_repair
    fi
    if $HEX_CLI -c cluster check | grep -q NG ; then
        Error "PPU upgrade aborted: fix NG services before continuing"
    fi

    local accessible_pkgs=$(timeout 30 cubectl node exec /usr/sbin/hex_install list | wc -l)
    local cluster_nodes=$(cubectl node list | wc -l)
    if [ $accessible_pkgs -lt $cluster_nodes ] ; then
        cubectl node exec -p /usr/sbin/hex_install list
        Error "Not every node in the cluster has access to firmware package"
    elif [ $accessible_pkgs -gt $cluster_nodes ] ; then
        cubectl node exec -p /usr/sbin/hex_install list
        Error "Make sure only one firmware package exists in /var/update/"
    else
        echo "All cluster nodes have proper access to Cube firmware package: $(/usr/sbin/hex_install list)"
        for PKG in $(ls -1 /var/update/*.pkg) ; do
            if [ ! -e "$PKG" ] ; then
                Error "$PKG does not come with its corresponding md5 file: ${PKG}.md5"
            else
                expected_checksum=$(cat ${PKG}.md5 | awk '{ print $1 }')
                actual_checksum=$(/usr/bin/md5sum -z $PKG | awk '{ print $1 }')
                if [ "x$expected_checksum" != "x$actual_checksum" ] ; then
                    Error "Failed to verify checksum : ${PKG}.md5 $expected_checksum, $PKG $actual_checksum"
                else
                    echo "Successfully verified checksum"
                    echo "Cluster nodes to be upgraded: "
                    cubectl node list
                    echo "WARNING: upgrade in progress. DO NOT INTERRUPT PROGRAM"
                    cubectl node exec -p "(sleep 1 && echo 1 && sleep 1 && echo 1 && sleep 1 && echo YES) | $HEX_CLI -c update update ; sync"
                    echo "Successfully completed firmware package upgrade"
                    master_control=$(cubectl node list -j | jq -r .[].hostname | head -1)
                    echo "Please monitor Cube login console (Blue/Black login banner) of individual node until the last node on list finishes"
                    if $HEX_SDK remote_run $master_control "$HEX_SDK is_compute_node" && [ $(cubectl node list -r compute | wc -l) -gt 1 ] ; then
                        if $HEX_SDK remote_run $master_control "pgrep qemu-kvm >/dev/null" ; then
                            echo "Enter YES to AUTOMATICALLY evacuate live VMs on $master_control"
                            $HEX_SDK remote_run $master_control "echo YES | $HEX_CLI -c iaas compute pre_failure_host_evacuation $master_control"
                            $HEX_SDK remote_run $master_control "for i in {1..60} ; do sleep 10 ; pgrep qemu-kvm >/dev/null || break ; done"
                        fi
                    fi
                    if $HEX_SDK remote_run $master_control "pgrep qemu-kvm >/dev/null" ; then
                        Error "some VMs on $master_control are still running (Please evacuate or shut them off and then continue with rebooting $master_control manually)"
                    else
                        echo "Enter YES to AUTOMATICALLY reboot each node in above sequence, starting with $master_control"
                        $HEX_SDK remote_run $master_control "$HEX_CLI -c reboot"
                    fi
                fi
            fi
        done
    fi
}

cluster_check()
{
    HEX_HEALTH_LAST=1 hex_cli -c cluster check
}

cluster_check_repair()
{
    HEX_HEALTH_LAST=1 hex_cli -c cluster check_repair
}
